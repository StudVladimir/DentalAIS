// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using MySql.Data.MySqlClient;
using System.Data;

namespace DentalSV
{
	public partial class LogHistoryViewController : NSViewController
	{
		public LogHistoryViewController (IntPtr handle) : base (handle)
		{
		}
        private LogHistoryTableDatasource DataSource = new LogHistoryTableDatasource();
        public override void ViewDidLoad()
        {
			UpdateTableView();
        }
		private void UpdateTableView()
		{
            DataSource = new LogHistoryTableDatasource();

            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("Select Login_id, concat(Surname,' ', Name,' ', Patronymic), DateTime from LoginHistory Inner Join Employees ON LoginHistory.Employee_id = Employees.Employee_id order by DateTime desc;", db.GetConnection());

            adapter.SelectCommand = command;

            adapter.Fill(table);

            foreach (DataRow row in table.Rows)
            {
                int counter = 1;
                string formatdate = "";
                int log_id = new int();
                var fio = "";
                var datetime = new DateTime();

                var cells = row.ItemArray;
                foreach (object cell in cells)
                {
                    switch (counter)
                    {
                        case 1:
                            log_id = (int)cell;
                            break;
                        case 2:
                            fio = (string)cell;
                            break;
                        case 3:
                            datetime = (DateTime)cell;
                            formatdate = datetime.ToString("dd/MM/yyyy HH:mm");
                            break;
                    }
                    counter++;
                }
                DataSource.LogHisS.Add(new LogsHis(log_id, fio, formatdate));
                LogHisTableView.DataSource = DataSource;
                LogHisTableView.Delegate = new LogHistoryTableDelegate(DataSource);
            }
            //Чистит таблицу при отсутсвии записей
            if (table.Rows.Count == 0)
            {
                DataSource.LogHisS.Clear();
                LogHisTableView.DataSource = DataSource;
                LogHisTableView.Delegate = new LogHistoryTableDelegate(DataSource);
            }
        }
    }
}
