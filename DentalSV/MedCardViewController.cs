// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using MySql.Data.MySqlClient;
using System.Data;
using System.Globalization;
using System.Reflection;
using ScreenCaptureKit;
using ImageKit;
using System.IO;

namespace DentalSV
{
	public partial class MedCardViewController : NSViewController
	{
		public MedCardViewController (IntPtr handle) : base (handle)
		{
		}

        string[] FieldsBeforeChanges = new string[15];
        string[] FieldsAfterChanges = new string[15];

        public override void ViewDidLoad()
        {
            UpdateMedCardView();
            UpdateVisitTable();
            SetImg();
        }
        
        private void UpdateMedCardView()
        {
            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("SELECT Surname, Name, Patronymic, Phone, WorkingPlace, ChronicDiseases, Injurys, Allergies, InfectiousDiseases, MucosalCondition, VisualInspection, ProstheticPlan FROM Patients Inner Join MedicalCard ON Patients.Patient_id=MedicalCard.Patient_id WHERE Patients.Patient_id = @id order by MedicalCard.CreationDateTime desc limit 1;", db.GetConnection());
            command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;
            adapter.SelectCommand = command;

            adapter.Fill(table);

            NSTextField[] TxtFields = {SurnameTxtField, NameTxtField, PatronymicTxtField, PhoneTxtField, WorkingPlaceTxtField, ChronicDiseasesTxtField, InjurysTxtField, AllergiesTxtField, InfectiousDiseasesTxtField, MucosalConditionTxtField, VisualinspectionTxtField, ProtheticPlanTxtField};

            foreach (DataRow row in table.Rows)
            {
                var cells = row.ItemArray;
                int counter = 0;
                foreach (object cell in cells)
                {
                    if (cell == DBNull.Value)
                    {
                        TxtFields[counter].StringValue = "";
                    }
                    else
                    {
                        TxtFields[counter].StringValue = (string)cell;
                    }
                    counter++;
                }
            }

            command = new MySqlCommand("select BirthDate from Patients Where Patient_id = @id;", db.GetConnection());
            command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;
            adapter.SelectCommand = command;
            table = new DataTable();
            adapter.Fill(table);
            string date = table.Rows[0].ItemArray[0].ToString().Remove(9);
            DateTime dt = DateTime.Parse(date);
            BirthdateDatePicker.DateValue = DateTimeToNSDate(dt);

            command = new MySqlCommand("select Pensioner from Patients Where Patient_id = @id;", db.GetConnection());
            command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;
            adapter.SelectCommand = command;
            table = new DataTable();
            adapter.Fill(table);
            var cb = table.Rows[0].ItemArray[0];
            string cbstr = cb.ToString();
            if (cbstr == "False")
                PensionerComboBox.StringValue = "Нет";
            else
                PensionerComboBox.StringValue = "Да";

            PublicValues.DentalFormulaNeedChanged = false;
            command = new MySqlCommand("SELECT DentalFormula FROM MedicalCard Where Patient_id = @id order by CreationDateTime desc;", db.GetConnection());
            command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;
            adapter.SelectCommand = command;
            table = new DataTable();
            adapter.Fill(table);
            var DentalFormulaValueBeforeChanges = table.Rows[0].ItemArray[0].ToString();

            for (int i = 0; i < TxtFields.Length; i++)
            {
                FieldsBeforeChanges[i] = TxtFields[i].StringValue;
            }
            FieldsBeforeChanges[12] = BirthdateDatePicker.DateValue.ToString();
            FieldsBeforeChanges[13] = PensionerComboBox.StringValue;
            FieldsBeforeChanges[14] = DentalFormulaValueBeforeChanges;

            command = new MySqlCommand("Select CreationDateTime From MedicalCard Where Patient_id=@id order by CreationDateTime desc limit 1;;", db.GetConnection());
            command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;
            adapter.SelectCommand = command;
            table = new DataTable();
            adapter.Fill(table);
            DateUpdateCardLabel.StringValue = "Дата обновления карты - "+table.Rows[0].ItemArray[0].ToString();
        }

        partial void BtnCheckDentalFormula(NSObject sender)
        {
            var storyboard = NSStoryboard.FromName("Scene4", null);
            var window = storyboard.InstantiateControllerWithIdentifier("DentalFormula") as NSWindowController;
            window.ShowWindow(this);
        }

        partial void BtnBack(NSObject sender)
        {
            PublicValues.ChoosenPatientID = 0;
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene3", null);
            var window = storyboard.InstantiateControllerWithIdentifier("Scene3Main") as NSWindowController;
            window.ShowWindow(this);
        }

        partial void BtnSaveChanges(NSObject sender)
        {
            int counter = 0;
            NSTextField[] TxtFields = { SurnameTxtField, NameTxtField, PatronymicTxtField, PhoneTxtField, WorkingPlaceTxtField, ChronicDiseasesTxtField, InjurysTxtField, AllergiesTxtField, InfectiousDiseasesTxtField, MucosalConditionTxtField, VisualinspectionTxtField, ProtheticPlanTxtField };
            for (int i = 0; i < TxtFields.Length; i++)
            {
                FieldsAfterChanges[i] = TxtFields[i].StringValue;
            }
            FieldsAfterChanges[12] = BirthdateDatePicker.DateValue.ToString();
            FieldsAfterChanges[13] = PensionerComboBox.StringValue;
            if (PublicValues.DentalFormulaNeedChanged == true)
                FieldsAfterChanges[14] = PublicValues.DentalFormulaValue;
            else
                FieldsAfterChanges[14] = FieldsBeforeChanges[14];

            for (int i = 0; i < FieldsBeforeChanges.Length; i++)
            {
                if (FieldsBeforeChanges[i] == FieldsAfterChanges[i])
                    counter++;
            }

            if (counter == 15)
            {
                View.Window.OrderOut(Self);
            }
            else
            {
                DB db = new DB();
                MySqlCommand command = new MySqlCommand("INSERT INTO MedicalCard (`Patient_id`, `ChronicDiseases`, `InfectiousDiseases`, `Allergies`, `Injurys`, `MucosalCondition`, `VisualInspection`, `DentalFormula`, `ProstheticPlan`, `CreationDateTime`) VALUES (@patientid, @chronicdiseases, @infectiousdiseases, @allergies, @injurys, @mucosalcondition, @visualinspection, @dentalformula, @prostheticplan, @creationdatetime);", db.GetConnection());
                command.Parameters.Add("@patientid", MySqlDbType.VarChar).Value = PublicValues.ChoosenPatientID;
                command.Parameters.Add("@chronicdiseases", MySqlDbType.VarChar).Value = ChronicDiseasesTxtField.StringValue;
                command.Parameters.Add("@infectiousdiseases", MySqlDbType.VarChar).Value = InfectiousDiseasesTxtField.StringValue;
                command.Parameters.Add("@allergies", MySqlDbType.VarChar).Value = AllergiesTxtField.StringValue;
                command.Parameters.Add("@injurys", MySqlDbType.VarChar).Value = InjurysTxtField.StringValue;
                command.Parameters.Add("@mucosalcondition", MySqlDbType.VarChar).Value = MucosalConditionTxtField.StringValue;
                command.Parameters.Add("@visualinspection", MySqlDbType.VarChar).Value = VisualinspectionTxtField.StringValue;
                command.Parameters.Add("@dentalformula", MySqlDbType.VarChar).Value = FieldsAfterChanges[14];
                command.Parameters.Add("@prostheticplan", MySqlDbType.VarChar).Value = ProtheticPlanTxtField.StringValue;
                command.Parameters.Add("@creationdatetime", MySqlDbType.DateTime).Value = DateTime.Now;

                db.OpenConnection();
                command.ExecuteNonQuery();
                db.CloseConnection();

                command = new MySqlCommand("Update Patients Set Name=@name, Surname=@surname, Patronymic=@patronimyc,BirthDate=@birthdate,Phone=@phone,WorkingPlace=@workingplace,Pensioner=@pensioner where Patient_id=@id;", db.GetConnection());
                command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;
                command.Parameters.Add("@name", MySqlDbType.VarChar).Value = NameTxtField.StringValue;
                command.Parameters.Add("@surname", MySqlDbType.VarChar).Value = SurnameTxtField.StringValue;
                command.Parameters.Add("@patronimyc", MySqlDbType.VarChar).Value = PatronymicTxtField.StringValue;
                string pickDate = BirthdateDatePicker.DateValue.ToString();
                pickDate = pickDate.Remove(19);
                command.Parameters.Add("@birthdate", MySqlDbType.VarChar).Value = pickDate;
                command.Parameters.Add("@phone", MySqlDbType.VarChar).Value = PhoneTxtField.StringValue;
                command.Parameters.Add("@workingplace", MySqlDbType.VarChar).Value = WorkingPlaceTxtField.StringValue;
                int pensionerValue = 0;
                if (PensionerComboBox.StringValue == "Да")
                {
                    pensionerValue = 1;
                }
                command.Parameters.Add("@pensioner", MySqlDbType.Int32).Value = pensionerValue;
                db.OpenConnection();
                command.ExecuteNonQuery();
                db.CloseConnection();

                View.Window.OrderOut(Self);
                var storyboard = NSStoryboard.FromName("Scene3", null);
                var window = storyboard.InstantiateControllerWithIdentifier("Scene3Main") as NSWindowController;
                window.ShowWindow(this);
            }
        }

        private static Foundation.NSDate DateTimeToNSDate(DateTime date)
        {
            //Метод для конвертации DataTime в NSDate
            DateTime reference = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            var utcDateTime = date.ToUniversalTime();
            return Foundation.NSDate.FromTimeIntervalSinceReferenceDate((utcDateTime - reference).TotalSeconds);
        }

        private VisitTableDataSource DataSource = new VisitTableDataSource();
        public void UpdateVisitTable()
        {
            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("Select DateTime, Discription From Reception Where Patient_id=@id;", db.GetConnection());
            command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;

            adapter.SelectCommand = command;

            adapter.Fill(table);

            DataSource = new VisitTableDataSource();

            foreach (DataRow row in table.Rows)
            {
                int counter = 1;
                var visitdatetime = "";
                var discription = "";

                var cells = row.ItemArray;
                foreach (object cell in cells)
                {
                    switch (counter)
                    {
                        case 1:
                            visitdatetime = cell.ToString();
                            break;
                        case 2:
                            discription = cell.ToString();
                            break;
                    }
                    counter++;
                }
                DataSource.VisitS.Add(new Visit(visitdatetime, discription));
                // Populate the Product Table
                VisitTableView.DataSource = DataSource;
                VisitTableView.Delegate = new VisitTableDelegate(this, DataSource);
            }
        }

        partial void BtnCheckOtherMedCards(NSObject sender)
        {
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene5", null);
            var window = storyboard.InstantiateControllerWithIdentifier("Scene5Main") as NSWindowController;
            window.ShowWindow(this);
        }

        private void SetImg()
        {
            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("Select Photo From PatientsPhoto Where Patient_id=@id order by Date desc limit 1;", db.GetConnection());
            command.Parameters.Add("@id", MySqlDbType.Int32).Value = PublicValues.ChoosenPatientID;
            adapter.SelectCommand = command;

            adapter.Fill(table);
            if (table.Rows.Count > 0)
            {
                byte[] imageBytes = (byte[])table.Rows[0].ItemArray[0];

                MemoryStream memoryStream = new MemoryStream(imageBytes);
                NSImage image = new NSImage(NSData.FromStream(memoryStream));
                ImgView.Image = image;
            }
            else
            {
                BtnAllPhotosOutlet.Enabled = false;
            }
        }
        partial void BtnAllPhotos(NSObject sender)
        {
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene7", null);
            var window = storyboard.InstantiateControllerWithIdentifier("Scene7Main") as NSWindowController;
            window.ShowWindow(this);
        }
        partial void BtnProtezis(NSObject sender)
        {
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene11", null);
            var window = storyboard.InstantiateControllerWithIdentifier("Scene11Main") as NSWindowController;
            window.ShowWindow(this);
        }
    }
}
