// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using MySql.Data.MySqlClient;
using System.Data;
using MySqlX.XDevAPI.Relational;
using CoreFoundation;
using static System.Net.Mime.MediaTypeNames;
using System.Reflection.Emit;

namespace DentalSV
{
	public partial class CreateReceptionViewController : NSViewController
	{
		public CreateReceptionViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            if (ValuesForCreateReception.ChoosenPatientEntire != null)
            {
                //Значения полей для пациента который выбран
                IDTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.Id.ToString();
                FIOTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.FIO.ToString();
                BirthDateTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.BirthDate.ToString();
                PhoneTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.Phone.ToString();
                DatePickerOutlet.DateValue = (NSDate)ValuesForCreateReception.ChoosenDate;
                TimePickerNumbers.DateValue = (NSDate)ValuesForCreateReception.ChoosenTime;
                CabinetComboBox.StringValue = ValuesForCreateReception.ChoosenCab;
                DiscriptionTxtField.StringValue = ValuesForCreateReception.Description;
                ChoosenPatientIndicator.StringValue = "Пациент выбран";
                ChoosenPatientIndicator.TextColor = NSColor.SystemGreen;
                UpdateTableView();
                if (CabinetComboBox.StringValue == "")
                {
                    BtnSaveReceptionOutlet.Enabled = false;
                }
                ValuesForCreateReception.ChoosenPatientEntire = null;
            }
            else
            {
                DatePickerOutlet.DateValue = (NSDate)DateTime.Now;
                TimePickerNumbers.DateValue = (NSDate)DateTime.Now;
                UpdateTableView();
                StarIndicator.Hidden = true;
                BtnSaveReceptionOutlet.Enabled = false;
            }   
        }

        partial void DatePicker(NSObject sender)
        {
            UpdateTableView();
        }

        public void UpdateTableView()
		{
            var DataSource = new ReceptionTableDataSource();

            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("SELECT Reception_id, DateTime, Cabinet_id, concat(Surname,' ', Name,' ',Patronymic), Discription FROM Reception Inner Join Patients On Patients.Patient_id = Reception.Patient_id WHERE DateTime LIKE @datepicker order by DateTime;", db.GetConnection());

            string pickDate = DatePickerOutlet.DateValue.ToString();
            pickDate = pickDate.Remove(10) + "%";
            command.Parameters.Add("@datepicker", MySqlDbType.String).Value = pickDate;

            adapter.SelectCommand = command;

            adapter.Fill(table);

            foreach (DataRow row in table.Rows)
            {
                int counter = 1;
                string formatdate = "";
                int reception_id = new int();
                var datetime = new DateTime();
                var cabinet_id = new int();
                var patient_id = "";
                var discription = "";

                var cells = row.ItemArray;
                foreach (object cell in cells)
                {
                    switch (counter)
                    {
                        case 1:
                            reception_id = (int)cell;
                            break;
                        case 2:
                            datetime = (DateTime)cell;
                            formatdate = datetime.ToString("dd/MM/yyyy HH:mm");
                            break;
                        case 3:
                            cabinet_id = (int)cell;
                            break;
                        case 4:
                            patient_id = cell.ToString();
                            break;
                        case 5:
                            discription = cell.ToString();
                            break;
                    }
                    counter++;
                }

                if (table.Rows.Count <= 3)
                    WorkLoad.IntValue = 1;

                if (table.Rows.Count > 3)
                    WorkLoad.IntValue = 2;

                if (table.Rows.Count > 6)
                    WorkLoad.IntValue = 3;

                if (table.Rows.Count > 10)
                    WorkLoad.IntValue = 3;

                DataSource.ReceptionS.Add(new Reception(reception_id, formatdate, cabinet_id, patient_id, discription));
                ReceptionTableView.DataSource = DataSource;
                ReceptionTableView.Delegate = new ReceptionTableDelegate(DataSource);
            }
            //Чистит таблицу при отсутсвии записей
            if (table.Rows.Count == 0)
            {
                WorkLoad.IntValue = 0;
                DataSource.ReceptionS.Clear();
                ReceptionTableView.DataSource = DataSource;
                ReceptionTableView.Delegate = new ReceptionTableDelegate(DataSource);
            }
        }

        partial void TimePickerNumberAction(NSObject sender)
        {
            TimePickerDial.DateValue = TimePickerNumbers.DateValue;
        }

        partial void TimePickerDialAction(NSObject sender)
        {
            TimePickerNumbers.DateValue = TimePickerDial.DateValue;
        }

        public string CheckForPatient()
        {
            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("SELECT Patient_id FROM Patients WHERE Name=@name AND Surname=@surname AND Patronymic=@patronymic;", db.GetConnection());

            string[] Parametrs = new string[3];
            int counter = 0;
            for (int i = 0; i < FIOTxtField.StringValue.Length; i++)
            {
                if (FIOTxtField.StringValue[i].ToString() != " ")
                {
                    Parametrs[counter] += FIOTxtField.StringValue[i];
                }
                else
                    counter++;
            }

            command.Parameters.Add("@name", MySqlDbType.String).Value = Parametrs[1];
            command.Parameters.Add("@surname", MySqlDbType.String).Value = Parametrs[0];
            command.Parameters.Add("@patronymic", MySqlDbType.String).Value = Parametrs[2];

            adapter.SelectCommand = command;

            adapter.Fill(table);

            if (table.Rows.Count < 1)
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"Возможна ошибка при занесении пациента. Проверьте правильность заполнения поля ФИО в порядке: Фамилия, Имя, Отчество.",
                    MessageText = $"Пациент не найден",
                };
                alert.AddButton("Ок");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                    }
                });
                return "Не найден";
            }
            if (table.Rows.Count == 1)
            {
                if(CabinetComboBox.StringValue!="")
                    BtnSaveReceptionOutlet.Enabled = true;
                return table.Rows[0].ItemArray[0].ToString(); 
            }
            if (table.Rows.Count > 1)
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"При поиске пциента были найдены два или более человека подходящие под поисанные параметры.",
                    MessageText = $"Найдено несколько пациентов",
                };
                alert.AddButton("Ок");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                    }
                });
                return "Найдено несколько";
            }
            return "Ошибка поиска";
        }

        partial void FIOTxtFieldAction(NSObject sender)
        {
            if (CheckForPatient() != "Не найден" && CheckForPatient() != "Найдено несколько" && CheckForPatient() != "Ошибка поиска")
            {
                StarIndicator.Hidden = false;
                ChoosenPatientIndicator.StringValue = "Пациент выбран";
                ChoosenPatientIndicator.TextColor = NSColor.SystemGreen;

                DB db = new DB();

                DataTable table = new DataTable();

                MySqlDataAdapter adapter = new MySqlDataAdapter();

                MySqlCommand command = new MySqlCommand("Select Patient_id, BirthDate, Phone From Patients Where Patient_id = @id;", db.GetConnection());
                command.Parameters.Add("@id", MySqlDbType.Int32).Value = CheckForPatient();
                adapter.SelectCommand = command;
                adapter.Fill(table);

                NSTextField[] TxtFields = {IDTxtField, BirthDateTxtField, PhoneTxtField};

                foreach (DataRow row in table.Rows)
                {
                    var cells = row.ItemArray;
                    int counter = 0;
                    foreach (object cell in cells)
                    {
                        if (cell == DBNull.Value)
                        {
                            TxtFields[counter].StringValue = "";
                        }
                        else
                        {
                            switch (counter)
                            {
                                case 0:
                                    IDTxtField.StringValue = cell.ToString();
                                    break;
                                case 1:
                                    DateTime datetime = (DateTime)cell;
                                    BirthDateTxtField.StringValue = datetime.ToString("dd/MM/yyyy");
                                    break;
                                case 2:
                                    PhoneTxtField.StringValue = cell.ToString();
                                    break;
                            }
                        }
                        counter++;
                    }
                }
            }
            else
            {
                BtnSaveReceptionOutlet.Enabled = false;
                StarIndicator.Hidden = true;
                ChoosenPatientIndicator.StringValue = "Пациент не выбран";
                ChoosenPatientIndicator.TextColor = NSColor.SystemGray;

                NSTextField[] TxtFields = { IDTxtField, BirthDateTxtField, PhoneTxtField };

                for (int i = 0; i < TxtFields.Length; i++)
                {
                    TxtFields[i].StringValue = "";
                }
            }
        }

        partial void BtnSaveReception(NSObject sender)
        {
            
            if (CheckForPatient()== "Не найден")
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"Возможна ошибка при занесении пациента. Проверьте правильность заполнения поля ФИО в формате: Фамилия Имя Отчество.",
                    MessageText = $"Пациент не найден",
                };
                alert.AddButton("Ок");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                    }
                });
            }
            if (CheckForPatient() == "Найдено несколько")
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"При поиске пциента были найдены два или более человека подходящие под поисанные параметры.",
                    MessageText = $"Найдено несколько пациентов",
                };
                alert.AddButton("Ок");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                    }
                });
            }
            CreateNewReception();
        }

        partial void BtnBack(NSObject sender)
        {
            ValuesForCreateReception.ChoosenPatientEntire = null;
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene2", null);
            var window = storyboard.InstantiateControllerWithIdentifier("Scene2Main") as NSWindowController;
            window.ShowWindow(this);
        }

        public void CreateNewReception()
        {
            DB db = new DB();

            MySqlCommand command = new MySqlCommand("insert into Reception (`DateTime`,`Cabinet_id`,`Patient_id`,`Discription`) Values (@dt, @cabinet_id,@patient_id,@discription);", db.GetConnection());

            string formatdate = ((DateTime)DatePickerOutlet.DateValue).ToString("yyyy/MM/dd");
            string formattime = ((DateTime)TimePickerNumbers.DateValue).AddHours(3).ToString("HH:mm:ss");
            string formattedDateTime = formatdate +" "+ formattime;

            command.Parameters.Add("@dt", MySqlDbType.DateTime).Value = formattedDateTime;
            command.Parameters.Add("@cabinet_id", MySqlDbType.Int32).Value = CabinetComboBox.StringValue.Remove(0, 8);
            command.Parameters.Add("@patient_id", MySqlDbType.Int32).Value = IDTxtField.IntValue;
            command.Parameters.Add("@discription", MySqlDbType.VarChar).Value = DiscriptionTxtField.StringValue;

            db.OpenConnection();
            command.ExecuteNonQuery();
            db.CloseConnection();

            var alert = new NSAlert()
            {
                AlertStyle = NSAlertStyle.Informational,
                InformativeText = $"",
                MessageText = $"Запись успешно добавлена",
            };
            alert.AddButton("Ок");
            alert.BeginSheetForResponse(this.View.Window, (result) => {
                // Should we delete the requested row?
                if (result == 1001)
                {
                }
            });

            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene2", null);
            var window = storyboard.InstantiateControllerWithIdentifier("Scene2Main") as NSWindowController;
            window.ShowWindow(this);
        }

        partial void CabinetComboBoxAction(NSObject sender)
        {
            if (CheckForPatient() != "Не найден" && CheckForPatient() != "Найдено несколько" && CheckForPatient() != "Ошибка поиска")
            {
                BtnSaveReceptionOutlet.Enabled = true;
            }
        }

        partial void BtnChoosePatient(NSObject sender)
        {
            ValuesForCreateReception.ChoosenDate = (DateTime)DatePickerOutlet.DateValue;
            ValuesForCreateReception.ChoosenTime = (DateTime)TimePickerNumbers.DateValue;
            ValuesForCreateReception.ChoosenCab = CabinetComboBox.StringValue;
            ValuesForCreateReception.Description = DiscriptionTxtField.StringValue;
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene6", null);
            var window = storyboard.InstantiateControllerWithIdentifier("ChoosePatient432") as NSWindowController;
            window.ShowWindow(this);
        }
    }
}
