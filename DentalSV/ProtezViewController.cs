// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using MySql.Data.MySqlClient;
using System.Data;

namespace DentalSV
{
	public partial class ProtezViewController : NSViewController
	{
		public ProtezViewController (IntPtr handle) : base (handle)
		{
		}
        public override void ViewDidLoad()
        {
            CBSize.Enabled = false;
            CBDentalSet.Enabled = false;
            CBClammers.Enabled = false;
            CBSaddles.Enabled = false;
            CBMaterialsFIRST.Enabled = false;
            CBInset.Enabled = false;
            CBMaterialsCrown.Enabled = false;
            CBMaterialsLitok.Enabled = false;
            CBMaterialsFacetka.Enabled = false;
            CBSolderingFacetka.Enabled = false;
            CBSolderingLitok.Enabled = false;
            if (ValuesForCreateReception.ChoosenPatientEntire != null)
            {
                //Значения полей для пациента который выбран
                IDTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.Id.ToString();
                FIOTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.FIO.ToString();
                BirthDateTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.BirthDate.ToString();
                PhoneTxtField.StringValue = ValuesForCreateReception.ChoosenPatientEntire.Phone.ToString();
                ChoosenPatientIndicator.StringValue = "Пациент выбран";
                ChoosenPatientIndicator.TextColor = NSColor.SystemGreen;
                BtnSaveOutlet.Enabled = true;
                ValuesForCreateReception.ChoosenPatientEntire = null;
            }
            else
            {
                StarIndicator.Hidden = true;
                BtnSaveOutlet.Enabled = false;
            }
        }
        public string CheckForPatient()
        {
            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("SELECT Patient_id FROM Patients WHERE Name=@name AND Surname=@surname AND Patronymic=@patronymic;", db.GetConnection());

            string[] Parametrs = new string[3];
            int counter = 0;
            for (int i = 0; i < FIOTxtField.StringValue.Length; i++)
            {
                if (FIOTxtField.StringValue[i].ToString() != " ")
                {
                    Parametrs[counter] += FIOTxtField.StringValue[i];
                }
                else
                    counter++;
            }

            command.Parameters.Add("@name", MySqlDbType.String).Value = Parametrs[1];
            command.Parameters.Add("@surname", MySqlDbType.String).Value = Parametrs[0];
            command.Parameters.Add("@patronymic", MySqlDbType.String).Value = Parametrs[2];

            adapter.SelectCommand = command;

            adapter.Fill(table);

            if (table.Rows.Count < 1)
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"Возможна ошибка при занесении пациента. Проверьте правильность заполнения поля ФИО в порядке: Фамилия, Имя, Отчество.",
                    MessageText = $"Пациент не найден",
                };
                alert.AddButton("Ок");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                    }
                });
                return "Не найден";
            }
            if (table.Rows.Count == 1)
            {
                BtnSaveOutlet.Enabled = true;
                return table.Rows[0].ItemArray[0].ToString();
            }
            if (table.Rows.Count > 1)
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"При поиске пциента были найдены два или более человека подходящие под поисанные параметры.",
                    MessageText = $"Найдено несколько пациентов",
                };
                alert.AddButton("Ок");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                    }
                });
                return "Найдено несколько";
            }
            return "Ошибка поиска";
        }

        partial void FIOTxtFieldAction(NSObject sender)
        {
            if (CheckForPatient() != "Не найден" && CheckForPatient() != "Найдено несколько" && CheckForPatient() != "Ошибка поиска")
            {
                StarIndicator.Hidden = false;
                ChoosenPatientIndicator.StringValue = "Пациент выбран";
                ChoosenPatientIndicator.TextColor = NSColor.SystemGreen;

                DB db = new DB();

                DataTable table = new DataTable();

                MySqlDataAdapter adapter = new MySqlDataAdapter();

                MySqlCommand command = new MySqlCommand("Select Patient_id, BirthDate, Phone From Patients Where Patient_id = @id;", db.GetConnection());
                command.Parameters.Add("@id", MySqlDbType.Int32).Value = CheckForPatient();
                adapter.SelectCommand = command;
                adapter.Fill(table);

                NSTextField[] TxtFields = { IDTxtField, BirthDateTxtField, PhoneTxtField };

                foreach (DataRow row in table.Rows)
                {
                    var cells = row.ItemArray;
                    int counter = 0;
                    foreach (object cell in cells)
                    {
                        if (cell == DBNull.Value)
                        {
                            TxtFields[counter].StringValue = "";
                        }
                        else
                        {
                            switch (counter)
                            {
                                case 0:
                                    IDTxtField.StringValue = cell.ToString();
                                    break;
                                case 1:
                                    DateTime datetime = (DateTime)cell;
                                    BirthDateTxtField.StringValue = datetime.ToString("dd/MM/yyyy");
                                    break;
                                case 2:
                                    PhoneTxtField.StringValue = cell.ToString();
                                    break;
                            }
                        }
                        counter++;
                    }
                }
            }
            else
            {
                BtnSaveOutlet.Enabled = false;
                StarIndicator.Hidden = true;
                ChoosenPatientIndicator.StringValue = "Пациент не выбран";
                ChoosenPatientIndicator.TextColor = NSColor.SystemGray;

                NSTextField[] TxtFields = { IDTxtField, BirthDateTxtField, PhoneTxtField };

                for (int i = 0; i < TxtFields.Length; i++)
                {
                    TxtFields[i].StringValue = "";
                }
            }
        }
        partial void BtnChoosePat(NSObject sender)
        {
            PublicValues.ChoosePatForProtez = true;
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene6", null);
            var window = storyboard.InstantiateControllerWithIdentifier("ChoosePatient432") as NSWindowController;
            window.ShowWindow(this);
        }

        partial void BtnSaveAction(NSObject sender)
        {
            DB db = new DB();

            MySqlCommand command = new MySqlCommand("insert into RemovableProsthesis (`Patient_id`,`Material_id`,`FullPartial_id`,`DentalSet_id`,`Clamer_id`,`Saddle_id`,`ClamersQuntity`) Values (@pat_id, @material_id,@fullpartial_id,@dentalset_id,@clamer_id,@saddle_id,@clamersquantity);", db.GetConnection());
            command.Parameters.Add("@pat_id", MySqlDbType.Int32).Value = IDTxtField.StringValue;
            command.Parameters.Add("@material_id", MySqlDbType.Int32).Value = CBMaterialsFIRST.SelectedIndex + 1;
            command.Parameters.Add("@fullpartial_id", MySqlDbType.Int32).Value = CBSize.SelectedIndex + 1;
            command.Parameters.Add("@dentalset_id", MySqlDbType.Int32).Value = CBDentalSet.SelectedIndex + 1;
            command.Parameters.Add("@clamer_id", MySqlDbType.Int32).Value = CBClammers.SelectedIndex + 1;
            command.Parameters.Add("@saddle_id", MySqlDbType.Int32).Value = CBSaddles.SelectedIndex + 1;
            command.Parameters.Add("@clamersquantity", MySqlDbType.Int32).Value = CBMaterialsFIRST.SelectedIndex + 1;

            db.OpenConnection();
            command.ExecuteNonQuery();
            db.CloseConnection();
            close();
        }

        private void close() {
            PublicValues.ChoosenPatientID = IDTxtField.IntValue;
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene3", null);
            var window = storyboard.InstantiateControllerWithIdentifier("MedicalCard") as NSWindowController;
            window.ShowWindow(this);
        }

        
        partial void ProtezTypeAction(NSObject sender)
        {
            if (CBProtezType.SelectedIndex == 0)
            {
                CBSize.Enabled = true;
                CBDentalSet.Enabled = true;
                CBClammers.Enabled = true;
                CBSaddles.Enabled = true;
                CBMaterialsFIRST.Enabled = true;
                CBInset.Enabled = false;
                CBMaterialsCrown.Enabled = false;
                CBMaterialsLitok.Enabled = false;
                CBMaterialsFacetka.Enabled = false;
                CBSolderingFacetka.Enabled = false;
                CBSolderingLitok.Enabled = false;
            }
            if (CBProtezType.SelectedIndex == 1)
            {
                CBSize.Enabled = false;
                CBDentalSet.Enabled = false;
                CBClammers.Enabled = false;
                CBSaddles.Enabled = false;
                CBMaterialsFIRST.Enabled = false;
                CBInset.Enabled = true;
                CBMaterialsCrown.Enabled = true;
                CBMaterialsLitok.Enabled = true;
                CBMaterialsFacetka.Enabled = true;
                CBSolderingFacetka.Enabled = true;
                CBSolderingLitok.Enabled = true;
            }
        }
    }
}
