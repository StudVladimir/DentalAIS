// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using MySql.Data.MySqlClient;
using System.Data;
using GameController;
using MySqlX.XDevAPI.Common;

namespace DentalSV
{
    public partial class PatientsViewController : NSViewController
    {
        public PatientsViewController(IntPtr handle) : base(handle)
        {

        }
        
        private PatientTableDataSource DataSource = new PatientTableDataSource();
        public void UpdatePatientTable()
        {
            DB db = new DB();

            DataTable table = new DataTable();

            MySqlDataAdapter adapter = new MySqlDataAdapter();

            MySqlCommand command = new MySqlCommand("select patient_id, concat(Surname,' ', Name,' ', Patronymic), BirthDate, Phone, WorkingPlace, Pensioner, patient_id FROM Patients;", db.GetConnection());

            adapter.SelectCommand = command;

            adapter.Fill(table);

            DataSource = new PatientTableDataSource();

            foreach (DataRow row in table.Rows)
            {
                int counter = 1;
                var id = new int();
                var fio = "";
                string formatdate = "";
                var birthdate = new DateTime();
                var phone = "";
                var workingplace = "";
                var pensioner = "";
                var medcardbtn = new NSButton();

                var cells = row.ItemArray;
                foreach (object cell in cells)
                {
                    switch (counter)
                    {
                        case 1:
                            id = (int)cell;
                            break;
                        case 2:
                            fio = cell.ToString();
                            break;
                        case 3:
                            birthdate = (DateTime)cell;
                            formatdate = birthdate.ToString("dd/MM/yyyy");
                            break;
                        case 4:
                            phone = cell.ToString();
                            break;
                        case 5:
                            workingplace = cell.ToString();
                            break;
                        case 6:
                            pensioner = cell.ToString();
                            break;
                        case 7:
                            medcardbtn = new NSButton();
                            break;
                    }
                    counter++;
                }
                DataSource.PatientS.Add(new Patient(id, fio, formatdate, phone, workingplace, pensioner));
                // Populate the Product Table
                PatientsTable.DataSource = DataSource;
                PatientsTable.Delegate = new PatientTableDelegate(this, DataSource);
            }
        }

        public override void ViewDidLoad()
        {
            UpdatePatientTable();
            PublicValues.handle = Handle;
        }
        partial void AddPatientBtn(NSObject sender)
        {
            View.Window.OrderOut(Self);
            var storyboard = NSStoryboard.FromName("Scene4", null);
            var window = storyboard.InstantiateControllerWithIdentifier("Scene4Main") as NSWindowController;
            window.ShowWindow(this);
        }

        partial void DeletePatientBtn(NSObject sender)
        {
            if (PatientsTable.SelectedRow >= 0)
            { 
                var patient = DataSource.PatientS[(int)PatientsTable.SelectedRow];

                // Configure alert
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"Вы уверены, что хотите удалить {patient.FIO}? Эта операция не может быть отменена.",
                    MessageText = $"Удалить {patient.FIO}?",
                };
                alert.AddButton("Отмена");
                alert.AddButton("Удалить");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                        DB db = new DB();

                        DataTable table = new DataTable();

                        MySqlDataAdapter adapter = new MySqlDataAdapter();

                        MySqlCommand command = new MySqlCommand("DELETE FROM Patients WHERE Patient_id = @id;", db.GetConnection());
                        command.Parameters.Add("@id", MySqlDbType.Int32).Value = patient.Id;
                        db.OpenConnection();
                        command.ExecuteNonQuery();
                        db.CloseConnection();
                        UpdatePatientTable();
                    }
                });
            }
            else
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Informational,
                    InformativeText = $"Для этой операции, выберите пациента в таблице и нажмите снова на кнопку.",
                    MessageText = $"Выбирете пациента",
                };
                alert.AddButton("Ок");
                alert.BeginSheetForResponse(this.View.Window, (result) => {
                    // Should we delete the requested row?
                    if (result == 1001)
                    {
                    }
                });
            }
        }

        public static void ClosePatientsWindow()
        {
            //View.Window.OrderOut(Self);
        }

        public void ReloadTable()
        {
            PatientsTable.ReloadData();
        }
    }
}